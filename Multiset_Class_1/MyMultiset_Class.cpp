#Generated by ChatGPT around 9/1/2025

#include "MyMultiset_Class.h"

// Constructor
MyMultiset_Class::MyMultiset_Class(int length, int minVal, int maxVal)
    : SetLength(length), MinValue(minVal), MaxValue(maxVal), current(length, minVal)
{
    updateMultiset();
}

// Reset to the first multiset (all MinValue)
void MyMultiset_Class::reset() {
    current.assign(SetLength, MinValue);
    updateMultiset();
}

// Advance to the next unique multiset (non-decreasing sequence)
bool MyMultiset_Class::next() {
    int i = SetLength - 1;
    while (i >= 0 && current[i] == MaxValue) {
        --i;
    }
    if (i < 0) return false; // no more configurations

    // Increment current[i]
    current[i]++;
    // Fill the rest with non-decreasing values
    for (int j = i + 1; j < SetLength; ++j) {
        current[j] = current[i];
    }
    updateMultiset();
    return true;
}

// Return the current multiset
const std::multiset<int>& MyMultiset_Class::getMultiset() const {
    return MyMultiset;
}

// Print the current multiset
void MyMultiset_Class::print() const {
    std::cout << "{ ";
    for (auto it = MyMultiset.begin(); it != MyMultiset.end(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << "}\n";
}

// Helper to update MyMultiset from the current vector
void MyMultiset_Class::updateMultiset() {
    MyMultiset.clear();
    for (int val : current) {
        MyMultiset.insert(val);
    }
}

// ======================
// Iterator implementation
// ======================
MyMultiset_Class::Iterator::Iterator(MyMultiset_Class* p, bool endFlag)
    : parent(p), isEnd(endFlag) 
{
    if (!endFlag) {
        parent->reset();
    }
}

const std::multiset<int>& MyMultiset_Class::Iterator::operator*() const {
    return parent->getMultiset();
}

MyMultiset_Class::Iterator& MyMultiset_Class::Iterator::operator++() {
    if (!parent->next()) {
        isEnd = true;
    }
    return *this;
}

bool MyMultiset_Class::Iterator::operator!=(const Iterator& other) const {
    return isEnd != other.isEnd;
}

MyMultiset_Class::Iterator MyMultiset_Class::begin() {
    return Iterator(this, false);
}

MyMultiset_Class::Iterator MyMultiset_Class::end() {
    return Iterator(this, true);
}
